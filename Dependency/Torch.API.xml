<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Torch.API</name>
    </assembly>
    <members>
        <member name="T:Torch.API.ConnectionState">
            <summary>
            Identifies a player's current connection state.
            </summary>
        </member>
        <member name="F:Torch.API.ConnectionState.Unknown">
            <summary>
            Unknown state.
            </summary>
        </member>
        <member name="F:Torch.API.ConnectionState.Connected">
            <summary>
            Connected to game.
            </summary>
        </member>
        <member name="F:Torch.API.ConnectionState.Left">
            <summary>
            Left the game.
            </summary>
        </member>
        <member name="F:Torch.API.ConnectionState.Disconnected">
            <summary>
            Disconnected from the game.
            </summary>
        </member>
        <member name="F:Torch.API.ConnectionState.Kicked">
            <summary>
            Kicked from the game.
            </summary>
        </member>
        <member name="F:Torch.API.ConnectionState.Banned">
            <summary>
            Banned from the game.
            </summary>
        </member>
        <member name="T:Torch.API.InformationalVersion">
            <summary>
            Version in the form v#.#.#.#-branch
            </summary>
        </member>
        <member name="M:Torch.API.InformationalVersion.ToString">
            <inheritdoc />
        </member>
        <member name="M:Torch.API.Managers.DependencyManagerExtensions.RemoveManager(Torch.API.Managers.IDependencyManager,System.Type)">
            <summary>
            Removes a single manager from this dependency manager.
            </summary>
            <param name="managerType">The dependency type to remove</param>
            <returns>The manager that was removed, or null if one wasn't removed</returns>
            <exception cref="T:System.InvalidOperationException">When removing managers from an initialized dependency manager</exception>
        </member>
        <member name="M:Torch.API.Managers.DependencyManagerExtensions.RemoveManager``1(Torch.API.Managers.IDependencyManager)">
            <summary>
            Removes a single manager from this dependency manager.
            </summary>
            <typeparam name="T">The dependency type to remove</typeparam>
            <returns>The manager that was removed, or null if one wasn't removed</returns>
            <exception cref="T:System.InvalidOperationException">When removing managers from an initialized dependency manager</exception>
        </member>
        <member name="M:Torch.API.Managers.DependencyProviderExtensions.GetManager``1(Torch.API.Managers.IDependencyProvider)">
            <summary>
            Gets the manager that provides the given type.  If there is no such manager, returns null.
            </summary>
            <typeparam name="T">Type of manager</typeparam>
            <returns>manager, or null if none exists</returns>
        </member>
        <member name="T:Torch.API.Managers.TorchChatMessage">
            <summary>
            Represents a scripted or user chat message.
            </summary>
        </member>
        <member name="M:Torch.API.Managers.TorchChatMessage.#ctor(System.String,System.String,VRageMath.Color,System.String)">
            <summary>
            Creates a new torch chat message with the given author and message.
            </summary>
            <param name="author">Author's name</param>
            <param name="message">Message</param>
            <param name="font">Font</param>
        </member>
        <member name="M:Torch.API.Managers.TorchChatMessage.#ctor(System.String,System.UInt64,System.String,Sandbox.Game.Gui.ChatChannel,System.Int64,VRageMath.Color,System.String)">
            <summary>
            Creates a new torch chat message with the given author and message.
            </summary>
            <param name="author">Author's name</param>
            <param name="authorSteamId">Author's steam ID</param>
            <param name="message">Message</param>
            <param name="font">Font</param>
        </member>
        <member name="M:Torch.API.Managers.TorchChatMessage.#ctor(System.UInt64,System.String,Sandbox.Game.Gui.ChatChannel,System.Int64,VRageMath.Color,System.String)">
            <summary>
            Creates a new torch chat message with the given author and message.
            </summary>
            <param name="authorSteamId">Author's steam ID</param>
            <param name="message">Message</param>
            <param name="font">Font</param>
        </member>
        <member name="F:Torch.API.Managers.TorchChatMessage.Timestamp">
            <summary>
            This message's timestamp.
            </summary>
        </member>
        <member name="F:Torch.API.Managers.TorchChatMessage.AuthorSteamId">
            <summary>
            The author's steam ID, if available.  Else, null.
            </summary>
        </member>
        <member name="F:Torch.API.Managers.TorchChatMessage.Author">
            <summary>
            The author's name, if available.  Else, null.
            </summary>
        </member>
        <member name="F:Torch.API.Managers.TorchChatMessage.Message">
            <summary>
            The message contents.
            </summary>
        </member>
        <member name="F:Torch.API.Managers.TorchChatMessage.Channel">
            <summary>
            The chat channel the message is part of.
            </summary>
        </member>
        <member name="F:Torch.API.Managers.TorchChatMessage.Target">
            <summary>
            The intended recipient of the message.
            </summary>
        </member>
        <member name="F:Torch.API.Managers.TorchChatMessage.Font">
            <summary>
            The font, or null if default.
            </summary>
        </member>
        <member name="F:Torch.API.Managers.TorchChatMessage.Color">
            <summary>
            The chat message color.
            </summary>
        </member>
        <member name="T:Torch.API.Managers.MessageRecievedDel">
            <summary>
            Callback used to indicate that a messaage has been recieved.
            </summary>
            <param name="msg"></param>
            <param name="consumed">If true, this event has been consumed and should be ignored</param>
        </member>
        <member name="T:Torch.API.Managers.MessageSendingDel">
            <summary>
            Callback used to indicate the user is attempting to send a message locally.
            </summary>
            <param name="msg">Message the user is attempting to send</param>
            <param name="consumed">If true, this event has been consumed and should be ignored</param>
        </member>
        <member name="E:Torch.API.Managers.IChatManagerClient.MessageRecieved">
            <summary>
            Event that is raised when a message addressed to us is recieved.  <see cref="T:Torch.API.Managers.MessageRecievedDel"/>
            </summary>
        </member>
        <member name="E:Torch.API.Managers.IChatManagerClient.MessageSending">
            <summary>
            Event that is raised when we are attempting to send a message.  <see cref="T:Torch.API.Managers.MessageSendingDel"/>
            </summary>
        </member>
        <member name="M:Torch.API.Managers.IChatManagerClient.SendMessageAsSelf(System.String)">
            <summary>
            Triggers the <see cref="E:Torch.API.Managers.IChatManagerClient.MessageSending"/> event,
            typically raised by the user entering text into the chat window.
            </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="M:Torch.API.Managers.IChatManagerClient.DisplayMessageOnSelf(System.String,System.String,System.String)">
            <summary>
            Displays a message on the UI given an author name and a message.
            </summary>
            <param name="author">Author name</param>
            <param name="message">Message content</param>
            <param name="font">font to use</param>
        </member>
        <member name="T:Torch.API.Managers.MessageProcessingDel">
            <summary>
            Callback used to indicate the server has recieved a message to process and forward on to others.
            </summary>
            <param name="authorId">Steam ID of the user sending a message</param>
            <param name="msg">Message the user is attempting to send</param>
            <param name="consumed">If true, this event has been consumed and should be ignored</param>
        </member>
        <member name="E:Torch.API.Managers.IChatManagerServer.MessageProcessing">
            <summary>
            Event triggered when the server has recieved a message and should process it.  <see cref="T:Torch.API.Managers.MessageProcessingDel"/>
            </summary>
        </member>
        <member name="M:Torch.API.Managers.IChatManagerServer.SendMessageAsOther(System.UInt64,System.String,System.UInt64)">
            <summary>
            Sends a message with the given author and message to the given player, or all players by default.
            </summary>
            <param name="authorId">Author's steam ID</param>
            <param name="message">The message to send</param>
            <param name="targetSteamId">Player to send the message to, or everyone by default</param>
        </member>
        <member name="M:Torch.API.Managers.IChatManagerServer.SendMessageAsOther(System.String,System.String,VRageMath.Color,System.UInt64,System.String)">
            <summary>
            Sends a scripted message with the given author and message to the given player, or all players by default.
            </summary>
            <param name="author">Author name</param>
            <param name="message">The message to send</param>
            <param name="color">Name color</param>
            <param name="font">Font to use</param>
            <param name="targetSteamId">Player to send the message to, or everyone by default</param>
        </member>
        <member name="M:Torch.API.Managers.IChatManagerServer.MuteUser(System.UInt64)">
            <summary>
            Mute user from global chat.
            </summary>
            <param name="steamId"></param>
            <returns></returns>
        </member>
        <member name="M:Torch.API.Managers.IChatManagerServer.UnmuteUser(System.UInt64)">
            <summary>
            Unmute user from global chat.
            </summary>
            <param name="steamId"></param>
            <returns></returns>
        </member>
        <member name="P:Torch.API.Managers.IChatManagerServer.MutedUsers">
            <summary>
            Users which are not allowed to chat.
            </summary>
        </member>
        <member name="T:Torch.API.Managers.IDependencyManager">
            <summary>
            Manages a set of <see cref="T:Torch.API.Managers.IManager"/> and the dependencies between them.
            </summary>
        </member>
        <member name="M:Torch.API.Managers.IDependencyManager.AddManager(Torch.API.Managers.IManager)">
            <summary>
            Registers the given manager into the dependency system.
            </summary>
            <remarks>
            This method only returns false when there is already a manager registered with a type derived from this given manager,
            or when the given manager is derived from an already existing manager.
            </remarks>
            <param name="manager">Manager to register</param>
            <exception cref="T:System.InvalidOperationException">When adding a new manager to an initialized dependency manager</exception>
            <returns>true if added, false if not</returns>
        </member>
        <member name="M:Torch.API.Managers.IDependencyManager.ClearManagers">
            <summary>
            Clears all managers registered with this dependency manager
            </summary>
            <exception cref="T:System.InvalidOperationException">When removing managers from an initialized dependency manager</exception>
        </member>
        <member name="M:Torch.API.Managers.IDependencyManager.RemoveManager(Torch.API.Managers.IManager)">
            <summary>
            Removes a single manager from this dependency manager.
            </summary>
            <param name="manager">The manager to remove</param>
            <returns>true if successful, false if the manager wasn't found</returns>
            <exception cref="T:System.InvalidOperationException">When removing managers from an initialized dependency manager</exception>
        </member>
        <member name="M:Torch.API.Managers.IDependencyManager.Attach">
            <summary>
            Sorts the dependency manager, then attaches all its registered managers in <see cref="P:Torch.API.Managers.IDependencyManager.AttachOrder" />
            </summary>
        </member>
        <member name="M:Torch.API.Managers.IDependencyManager.Detach">
            <summary>
            Detaches all registered managers in <see cref="P:Torch.API.Managers.IDependencyManager.DetachOrder"/>
            </summary>
        </member>
        <member name="P:Torch.API.Managers.IDependencyManager.AttachOrder">
            <summary>
            The order that managers should be attached in.  (Dependencies, then dependents)
            </summary>
            <exception cref="T:System.InvalidOperationException">When trying to determine load order before this dependency manager is initialized</exception>
        </member>
        <member name="P:Torch.API.Managers.IDependencyManager.DetachOrder">
            <summary>
            The order that managers should be detached in.  (Dependents, then dependencies)
            </summary>
            <exception cref="T:System.InvalidOperationException">When trying to determine unload order before this dependency manager is initialized</exception>
        </member>
        <member name="M:Torch.API.Managers.IDependencyProvider.GetManager(System.Type)">
            <summary>
            Gets the manager that provides the given type.  If there is no such manager, returns null.
            </summary>
            <param name="type">Type of manager</param>
            <returns>manager, or null if none exists</returns>
        </member>
        <member name="T:Torch.API.Managers.IManager">
            <summary>
            Base interface for Torch managers.
            </summary>
        </member>
        <member name="M:Torch.API.Managers.IManager.Attach">
            <summary>
            Attaches the manager to the session. Called once this manager's dependencies have been attached.
            </summary>
        </member>
        <member name="M:Torch.API.Managers.IManager.Detach">
            <summary>
            Detaches the manager from the session.  Called before this manager's dependencies are detached.
            </summary>
        </member>
        <member name="T:Torch.API.Managers.IMultiplayerManagerBase">
            <summary>
            API for multiplayer related functions common to servers and clients.
            </summary>
        </member>
        <member name="E:Torch.API.Managers.IMultiplayerManagerBase.PlayerJoined">
            <summary>
            Fired when a player joins.
            </summary>
        </member>
        <member name="E:Torch.API.Managers.IMultiplayerManagerBase.PlayerLeft">
            <summary>
            Fired when a player disconnects.
            </summary>
        </member>
        <member name="M:Torch.API.Managers.IMultiplayerManagerBase.GetPlayerBySteamId(System.UInt64)">
            <summary>
            Gets a player by their Steam64 ID or returns null if the player isn't found.
            </summary>
        </member>
        <member name="M:Torch.API.Managers.IMultiplayerManagerBase.GetPlayerByName(System.String)">
            <summary>
            Gets a player by their display name or returns null if the player isn't found.
            </summary>
        </member>
        <member name="M:Torch.API.Managers.IMultiplayerManagerBase.GetSteamUsername(System.UInt64)">
            <summary>
            Gets the steam username of a member's steam ID
            </summary>
            <param name="steamId">steam ID</param>
            <returns>steam username</returns>
        </member>
        <member name="T:Torch.API.Managers.IMultiplayerManagerServer">
            <summary>
            API for multiplayer functions that exist on servers and lobbies
            </summary>
        </member>
        <member name="M:Torch.API.Managers.IMultiplayerManagerServer.KickPlayer(System.UInt64)">
            <summary>
            Kicks the player from the game.
            </summary>
        </member>
        <member name="M:Torch.API.Managers.IMultiplayerManagerServer.BanPlayer(System.UInt64,System.Boolean)">
            <summary>
            Bans or unbans a player from the game.
            </summary>
        </member>
        <member name="M:Torch.API.Managers.IMultiplayerManagerServer.PromoteUser(System.UInt64)">
            <summary>
            Promotes user if possible.
            </summary>
            <param name="steamId"></param>
        </member>
        <member name="M:Torch.API.Managers.IMultiplayerManagerServer.DemoteUser(System.UInt64)">
            <summary>
            Demotes user if possible.
            </summary>
            <param name="steamId"></param>
        </member>
        <member name="M:Torch.API.Managers.IMultiplayerManagerServer.GetUserPromoteLevel(System.UInt64)">
            <summary>
            Gets a user's promote level.
            </summary>
            <param name="steamId"></param>
            <returns></returns>
        </member>
        <member name="P:Torch.API.Managers.IMultiplayerManagerServer.BannedPlayers">
            <summary>
            List of the banned SteamID's
            </summary>        
        </member>
        <member name="M:Torch.API.Managers.IMultiplayerManagerServer.IsBanned(System.UInt64)">
            <summary>
            Checks if the player with the given SteamID is banned.
            </summary>
            <param name="steamId">The SteamID of the player.</param>
            <returns>True if the player is banned; otherwise false.</returns>
        </member>
        <member name="E:Torch.API.Managers.IMultiplayerManagerServer.PlayerKicked">
            <summary>
            Raised when a player is kicked. Passes with SteamID of kicked player.
            </summary>
        </member>
        <member name="E:Torch.API.Managers.IMultiplayerManagerServer.PlayerBanned">
            <summary>
            Raised when a player is banned or unbanned. Passes SteamID of player, and true if banned, false if unbanned.
            </summary>
        </member>
        <member name="E:Torch.API.Managers.IMultiplayerManagerServer.PlayerPromoted">
            <summary>
            Raised when a player is promoted or demoted. Passes SteamID of player, and new promote level.
            </summary>
        </member>
        <member name="T:Torch.API.Managers.INetworkManager">
            <summary>
            API for the network intercept.
            </summary>
        </member>
        <member name="M:Torch.API.Managers.INetworkManager.RegisterNetworkHandler(Torch.API.Managers.INetworkHandler)">
            <summary>
            Register a network handler.
            </summary>
        </member>
        <member name="M:Torch.API.Managers.INetworkManager.UnregisterNetworkHandler(Torch.API.Managers.INetworkHandler)">
            <summary>
            Unregister a network handler.
            </summary>
            <returns>true if the handler was unregistered, false if it wasn't registered to begin with</returns>
        </member>
        <member name="T:Torch.API.Managers.INetworkHandler">
            <summary>
            Handler for multiplayer network messages.
            </summary>
        </member>
        <member name="M:Torch.API.Managers.INetworkHandler.CanHandle(VRage.Network.CallSite)">
            <summary>
            Returns if the handler can process the call site.
            </summary>
        </member>
        <member name="M:Torch.API.Managers.INetworkHandler.Handle(System.UInt64,VRage.Network.CallSite,VRage.Library.Collections.BitStream,System.Object,VRage.MyPacket)">
            <summary>
            Processes a network message.
            </summary>
            <returns>true if the message should be discarded</returns>
        </member>
        <member name="T:Torch.API.Managers.IPluginManager">
            <summary>
            API for the Torch plugin manager.
            </summary>
        </member>
        <member name="E:Torch.API.Managers.IPluginManager.PluginsLoaded">
            <summary>
            Fired when plugins are loaded.
            </summary>
        </member>
        <member name="P:Torch.API.Managers.IPluginManager.Plugins">
            <summary>
            Collection of loaded plugins.
            </summary>
        </member>
        <member name="M:Torch.API.Managers.IPluginManager.UpdatePlugins">
            <summary>
            Updates all loaded plugins.
            </summary>
        </member>
        <member name="M:Torch.API.Managers.IPluginManager.LoadPlugins">
            <summary>
            Load plugins.
            </summary>
        </member>
        <member name="T:Torch.API.Event.EventHandlerAttribute">
            <summary>
            Attribute indicating that a method should be invoked when the event occurs.
            </summary>
        </member>
        <member name="P:Torch.API.Event.EventHandlerAttribute.Priority">
            <summary>
            Events are executed from low priority to high priority.
            </summary>
            <remarks>
            While this may seem unintuitive this gives the high priority events the final say on changing/canceling events.
            </remarks>
        </member>
        <member name="P:Torch.API.Event.EventHandlerAttribute.SkipCancelled">
            <summary>
            Specifies if this handler should ignore a consumed event.
            </summary>
            <remarks>
            If <see cref="P:Torch.API.Event.EventHandlerAttribute.SkipCancelled"/> is <em>true</em> and the event is cancelled by a lower priority handler this handler won't be invoked.
            </remarks>
            <seealso cref="P:Torch.API.Event.IEvent.Cancelled"/>
        </member>
        <member name="P:Torch.API.Event.IEvent.Cancelled">
            <summary>
            An event that has been cancelled will no be processed in the default manner.
            </summary>
            <seealso cref="P:Torch.API.Event.EventHandlerAttribute.SkipCancelled"/>
        </member>
        <member name="T:Torch.API.Event.IEventHandler">
            <summary>
            Interface used to tag an event handler.  This does <b>not</b> register it with the event manager.
            </summary>
        </member>
        <member name="T:Torch.API.Event.IEventManager">
            <summary>
            Manager class responsible for registration of event handlers.
            </summary>
        </member>
        <member name="M:Torch.API.Event.IEventManager.RegisterHandler(Torch.API.Event.IEventHandler)">
            <summary>
            Registers all event handler methods contained in the given instance 
            </summary>
            <param name="handler">Instance to register</param>
            <returns><b>true</b> if added, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Torch.API.Event.IEventManager.UnregisterHandler(Torch.API.Event.IEventHandler)">
            <summary>
            Unregisters all event handler methods contained in the given instance 
            </summary>
            <param name="handler">Instance to unregister</param>
            <returns><b>true</b> if removed, <b>false</b> otherwise</returns>
        </member>
        <member name="T:Torch.API.IPlayer">
            <summary>
            Represents a player on the server.
            </summary>
        </member>
        <member name="P:Torch.API.IPlayer.Name">
            <summary>
            The name of the player.
            </summary>
        </member>
        <member name="P:Torch.API.IPlayer.SteamId">
            <summary>
            The SteamID of the player.
            </summary>
        </member>
        <member name="P:Torch.API.IPlayer.State">
            <summary>
            The player's current connection state.
            </summary>
        </member>
        <member name="P:Torch.API.Plugins.ITorchPlugin.Id">
            <summary>
            A unique ID for the plugin.
            </summary>
        </member>
        <member name="P:Torch.API.Plugins.ITorchPlugin.Version">
            <summary>
            The version of the plugin.
            </summary>
        </member>
        <member name="P:Torch.API.Plugins.ITorchPlugin.Name">
            <summary>
            The name of the plugin.
            </summary>
        </member>
        <member name="M:Torch.API.Plugins.ITorchPlugin.Init(Torch.API.ITorchBase)">
            <summary>
            This is called before the game loop is started.
            </summary>
            <param name="torchBase">Torch instance</param>
        </member>
        <member name="M:Torch.API.Plugins.ITorchPlugin.Update">
            <summary>
            This is called on the game thread after each tick.
            </summary>
        </member>
        <member name="P:Torch.API.Plugins.ITorchPlugin.State">
            <summary>
            Plugin's enabled state. Mainly for UI niceness
            </summary>
        </member>
        <member name="M:Torch.API.Plugins.IWpfPlugin.GetControl">
            <summary>
            Used by the server's WPF interface to load custom plugin controls.
            You must instantiate your plugin's control object here, otherwise it will not be owned by the correct thread for WPF.
            </summary>
        </member>
        <member name="T:Torch.API.Plugins.PluginAttribute">
            <summary>
            Indicates that the given type should be loaded by the plugin manager as a plugin.
            </summary>
        </member>
        <member name="P:Torch.API.Plugins.PluginAttribute.Name">
            <summary>
            The display name of the plugin
            </summary>
        </member>
        <member name="P:Torch.API.Plugins.PluginAttribute.Version">
            <summary>
            The version of the plugin
            </summary>
        </member>
        <member name="P:Torch.API.Plugins.PluginAttribute.Guid">
            <summary>
            The GUID of the plugin
            </summary>
        </member>
        <member name="M:Torch.API.Plugins.PluginAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new plugin attribute with the given attributes
            </summary>
            <param name="name"></param>
            <param name="version"></param>
            <param name="guid"></param>
        </member>
        <member name="M:Torch.API.Plugins.PluginAttribute.#ctor(System.String,System.Type,System.String)">
            <summary>
            Creates a new plugin attribute with the given attributes.  Version is computed as the version of the assembly containing the given type.
            </summary>
            <param name="name"></param>
            <param name="versionSupplier">Version is this type's assembly's version</param>
            <param name="guid"></param>
        </member>
        <member name="T:Torch.API.ITorchBase">
            <summary>
            API for Torch functions shared between client and server.
            </summary>
        </member>
        <member name="E:Torch.API.ITorchBase.SessionLoading">
            <summary>
            Fired when the session begins loading.
            </summary>
        </member>
        <member name="E:Torch.API.ITorchBase.SessionLoaded">
            <summary>
            Fired when the session finishes loading.
            </summary>
        </member>
        <member name="E:Torch.API.ITorchBase.SessionUnloading">
            <summary>
            Fires when the session begins unloading.
            </summary>
        </member>
        <member name="E:Torch.API.ITorchBase.SessionUnloaded">
            <summary>
            Fired when the session finishes unloading.
            </summary>
        </member>
        <member name="P:Torch.API.ITorchBase.CurrentSession">
            <summary>
            Gets the currently running session instance, or null if none exists.
            </summary>
        </member>
        <member name="P:Torch.API.ITorchBase.Config">
            <summary>
            Configuration for the current instance.
            </summary>
        </member>
        <member name="P:Torch.API.ITorchBase.Plugins">
            <inheritdoc cref="T:Torch.API.Managers.IPluginManager"/>
        </member>
        <member name="P:Torch.API.ITorchBase.Managers">
            <inheritdoc cref="T:Torch.API.Managers.IDependencyManager"/>
        </member>
        <member name="P:Torch.API.ITorchBase.TorchVersion">
            <summary>
            The binary version of the current instance.
            </summary>
        </member>
        <member name="M:Torch.API.ITorchBase.Invoke(System.Action,System.String)">
            <summary>
            Invoke an action on the game thread.
            </summary>
        </member>
        <member name="M:Torch.API.ITorchBase.InvokeBlocking(System.Action,System.Int32,System.String)">
            <summary>
            Invoke an action on the game thread and block until it has completed.
            </summary>
            <param name="action">Action to execute</param>
            <param name="caller">Caller of the invoke function</param>
            <param name="timeoutMs">Timeout before <see cref="T:System.TimeoutException"/> is thrown, or -1 to never timeout</param>
            <exception cref="T:System.TimeoutException">If the action times out</exception>
        </member>
        <member name="M:Torch.API.ITorchBase.InvokeAsync(System.Action,System.String)">
            <summary>
            Invoke an action on the game thread asynchronously.
            </summary>
        </member>
        <member name="M:Torch.API.ITorchBase.InvokeAsync``1(System.Func{``0},System.String)">
            <summary>
            Invoke a function on the game thread asynchronously.
            </summary>
        </member>
        <member name="M:Torch.API.ITorchBase.Start">
            <summary>
            Signals the torch instance to start, then blocks until it's started.
            </summary>
        </member>
        <member name="M:Torch.API.ITorchBase.Stop">
            <summary>
            Signals the torch instance to stop, then blocks until it's stopped.
            </summary>
        </member>
        <member name="M:Torch.API.ITorchBase.Restart(System.Boolean)">
            <summary>
            Restart the Torch instance, blocking until the restart has been performed.
            </summary>
        </member>
        <member name="M:Torch.API.ITorchBase.Save(System.Int32,System.Boolean)">
            <summary>
            Initializes a save of the game.
            </summary>
            <param name="timeoutMs">timeout before the save is treated as failed, or -1 for no timeout</param>
            <param name="exclusive">Only start saving if we aren't already saving</param>
            <returns>Future result of the save, or null if one is in progress and in exclusive mode</returns>
        </member>
        <member name="M:Torch.API.ITorchBase.Init">
            <summary>
            Initialize the Torch instance.  Before this <see cref="M:Torch.API.ITorchBase.Start"/> is invalid.
            </summary>
        </member>
        <member name="M:Torch.API.ITorchBase.Destroy">
            <summary>
            Disposes the Torch instance.  After this <see cref="M:Torch.API.ITorchBase.Start"/> is invalid.
            </summary>
        </member>
        <member name="P:Torch.API.ITorchBase.GameState">
            <summary>
            The current state of the game this instance of torch is controlling.
            </summary>
        </member>
        <member name="E:Torch.API.ITorchBase.GameStateChanged">
            <summary>
            Event raised when <see cref="P:Torch.API.ITorchBase.GameState"/> changes.
            </summary>
        </member>
        <member name="T:Torch.API.ITorchServer">
            <summary>
            API for the Torch server.
            </summary>
        </member>
        <member name="P:Torch.API.ITorchServer.State">
            <summary>
            The current <see cref="T:Torch.API.ServerState"/>
            </summary>
        </member>
        <member name="P:Torch.API.ITorchServer.InstancePath">
            <summary>
            Path of the dedicated instance folder.
            </summary>
        </member>
        <member name="E:Torch.API.ITorchServer.Initialized">
            <summary>
            Raised when the server's Init() method has completed.
            </summary>
        </member>
        <member name="T:Torch.API.ITorchClient">
            <summary>
            API for the Torch client.
            </summary>
        </member>
        <member name="T:Torch.API.ModAPI.TorchAPI">
            <summary>
            Entry point for mods to access Torch.
            </summary>
        </member>
        <member name="T:Torch.API.ServerState">
            <summary>
            Used to indicate the state of the dedicated server.
            </summary>
        </member>
        <member name="F:Torch.API.ServerState.Stopped">
            <summary>
            The server is not running.
            </summary>
        </member>
        <member name="F:Torch.API.ServerState.Starting">
            <summary>
            The server is starting/loading the session.
            </summary>
        </member>
        <member name="F:Torch.API.ServerState.Running">
            <summary>
            The server is running.
            </summary>
        </member>
        <member name="F:Torch.API.ServerState.Error">
            <summary>
            The server encountered an error.
            </summary>
        </member>
        <member name="T:Torch.API.Session.GameSaveResult">
            <summary>
            The result of a save operation
            </summary>
        </member>
        <member name="F:Torch.API.Session.GameSaveResult.Success">
            <summary>
            Successfully saved
            </summary>
        </member>
        <member name="F:Torch.API.Session.GameSaveResult.GameNotReady">
            <summary>
            The game wasn't ready to be saved
            </summary>
        </member>
        <member name="F:Torch.API.Session.GameSaveResult.FailedToTakeSnapshot">
            <summary>
            Failed to take the snapshot of the current world state
            </summary>
        </member>
        <member name="F:Torch.API.Session.GameSaveResult.FailedToSaveToDisk">
            <summary>
            Failed to save the snapshot to disk
            </summary>
        </member>
        <member name="F:Torch.API.Session.GameSaveResult.UnknownError">
            <summary>
            An unknown error occurred
            </summary>
        </member>
        <member name="F:Torch.API.Session.GameSaveResult.TimedOut">
            <summary>
            The save operation timed out
            </summary>
        </member>
        <member name="T:Torch.API.Session.ITorchSession">
            <summary>
            Represents the Torch code working with a single game session
            </summary>
        </member>
        <member name="P:Torch.API.Session.ITorchSession.Torch">
            <summary>
            The Torch instance this session is bound to
            </summary>
        </member>
        <member name="P:Torch.API.Session.ITorchSession.KeenSession">
            <summary>
            The Space Engineers game session this session is bound to.
            </summary>
        </member>
        <member name="P:Torch.API.Session.ITorchSession.Managers">
            <inheritdoc cref="T:Torch.API.Managers.IDependencyManager"/>
        </member>
        <member name="P:Torch.API.Session.ITorchSession.State">
            <summary>
            The current state of the session
            </summary>
        </member>
        <member name="E:Torch.API.Session.ITorchSession.StateChanged">
            <summary>
            Event raised when the <see cref="P:Torch.API.Session.ITorchSession.State"/> changes.
            </summary>
        </member>
        <member name="T:Torch.API.Session.SessionManagerFactoryDel">
            <summary>
            Creates a manager for the given session if applicable.
            </summary>
            <remarks>
            This is for creating managers that will live inside the session, not the manager that controls sesssions.
            </remarks>
            <param name="session">The session to construct a bound manager for</param>
            <returns>The manager that will live in the session, or null if none.</returns>
        </member>
        <member name="T:Torch.API.Session.ITorchSessionManager">
            <summary>
            Manages the creation and destruction of <see cref="T:Torch.API.Session.ITorchSession"/> instances for each <see cref="T:Sandbox.Game.World.MySession"/> created by Space Engineers.
            </summary>
        </member>
        <member name="P:Torch.API.Session.ITorchSessionManager.CurrentSession">
            <summary>
            The currently running session
            </summary>
        </member>
        <member name="E:Torch.API.Session.ITorchSessionManager.SessionStateChanged">
            <summary>
            Raised when any <see cref="T:Torch.API.Session.ITorchSession"/> <see cref="P:Torch.API.Session.ITorchSession.State"/> changes.
            </summary>
        </member>
        <member name="M:Torch.API.Session.ITorchSessionManager.AddFactory(Torch.API.Session.SessionManagerFactoryDel)">
            <summary>
            Adds the given factory as a supplier for session based managers
            </summary>
            <param name="factory">Session based manager supplier</param>
            <returns>true if added, false if already present</returns>
            <exception cref="T:System.ArgumentNullException">If the factory is null</exception>
        </member>
        <member name="M:Torch.API.Session.ITorchSessionManager.RemoveFactory(Torch.API.Session.SessionManagerFactoryDel)">
            <summary>
            Remove the given factory from the suppliers for session based managers
            </summary>
            <param name="factory">Session based manager supplier</param>
            <returns>true if removed, false if not present</returns>
            <exception cref="T:System.ArgumentNullException">If the factory is null</exception>
        </member>
        <member name="M:Torch.API.Session.ITorchSessionManager.AddOverrideMod(System.UInt64)">
            <summary>
            Add a mod to be injected into client's world download.
            </summary>
            <param name="modId"></param>
            <returns></returns>
        </member>
        <member name="M:Torch.API.Session.ITorchSessionManager.RemoveOverrideMod(System.UInt64)">
            <summary>
            Removes a mod from the injected mod list.
            </summary>
            <param name="modId"></param>
            <returns></returns>
        </member>
        <member name="P:Torch.API.Session.ITorchSessionManager.OverrideMods">
            <summary>
            List over mods that will be injected into client world downloads.
            </summary>
        </member>
        <member name="E:Torch.API.Session.ITorchSessionManager.OverrideModsChanged">
            <summary>
            Event raised when injected mod list changes.
            </summary>
        </member>
        <member name="T:Torch.API.Session.TorchSessionState">
            <summary>
            Represents the state of a <see cref="T:Torch.API.Session.ITorchSession"/>
            </summary>
        </member>
        <member name="F:Torch.API.Session.TorchSessionState.Loading">
            <summary>
            The session has been created, and is now loading.
            </summary>
        </member>
        <member name="F:Torch.API.Session.TorchSessionState.Loaded">
            <summary>
            The session has loaded, and is now running.
            </summary>
        </member>
        <member name="F:Torch.API.Session.TorchSessionState.Unloading">
            <summary>
            The session was running, and is now unloading.
            </summary>
        </member>
        <member name="F:Torch.API.Session.TorchSessionState.Unloaded">
            <summary>
            The session was unloading, and is now unloaded and stopped.
            </summary>
        </member>
        <member name="T:Torch.API.Session.TorchSessionStateChangedDel">
            <summary>
            Callback raised when a session's state changes
            </summary>
            <param name="session">The session who had a state change</param>
            <param name="newState">The session's new state</param>
        </member>
        <member name="T:Torch.API.TorchGameState">
            <summary>
            Represents the state of a <see cref="T:Sandbox.MySandboxGame"/>
            </summary>
        </member>
        <member name="F:Torch.API.TorchGameState.Creating">
            <summary>
            The game is currently being created.
            </summary>
        </member>
        <member name="F:Torch.API.TorchGameState.Created">
            <summary>
            The game has been created and is ready to begin loading.
            </summary>
        </member>
        <member name="F:Torch.API.TorchGameState.Loading">
            <summary>
            The game is currently loading.
            </summary>
        </member>
        <member name="F:Torch.API.TorchGameState.Loaded">
            <summary>
            The game is fully loaded and ready to start sessions
            </summary>
        </member>
        <member name="F:Torch.API.TorchGameState.Unloading">
            <summary>
            The game is beginning the unload sequence
            </summary>
        </member>
        <member name="F:Torch.API.TorchGameState.Unloaded">
            <summary>
            The game has been shutdown and is no longer active
            </summary>
        </member>
        <member name="T:Torch.API.TorchGameStateChangedDel">
            <summary>
            Callback raised when a game's state changes
            </summary>
            <param name="game">The game who had a state change</param>
            <param name="newState">The game's new state</param>
        </member>
        <member name="M:Torch.Utils.ColorUtils.TranslateColor(System.String)">
            <summary>
            Convert the old "font" or a RGB hex code to a Color.
            </summary>
        </member>
        <member name="T:Torch.Utils.StringUtils">
            <summary>
            Utility methods for strings
            </summary>
        </member>
        <member name="M:Torch.Utils.StringUtils.CommonPrefix(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines a common prefix for the given set of strings
            </summary>
            <param name="set">Set of strings</param>
            <returns>Common prefix</returns>
        </member>
        <member name="M:Torch.Utils.StringUtils.CommonSuffix(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines a common suffix for the given set of strings
            </summary>
            <param name="set">Set of strings</param>
            <returns>Common suffix</returns>
        </member>
    </members>
</doc>
