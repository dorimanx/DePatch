<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VRage.Scripting</name>
    </assembly>
    <members>
        <member name="T:VRage.Scripting.AnalysisExtensions">
            <summary>
                Contains various utilities used by the scripting engine.
            </summary>
        </member>
        <member name="T:VRage.Scripting.Analyzers.WhitelistDiagnosticAnalyzer">
            <summary>
                This analyzer scans a syntax tree for prohibited type and member references.
            </summary>
        </member>
        <member name="T:VRage.Scripting.IMyWhitelistBatch">
            <summary>
                A handle which enables adding members to the whitelist in a batch. It is highly
                recommended that you try to group your changes into as few batches as possible.
            </summary>
        </member>
        <member name="M:VRage.Scripting.IMyWhitelistBatch.AllowNamespaceOfTypes(Sandbox.ModAPI.MyWhitelistTarget,System.Type[])">
            <summary>
                Adds the entire namespace of one or more given types.
            </summary>
            <param name="target"></param>
            <param name="types"></param>
        </member>
        <member name="M:VRage.Scripting.IMyWhitelistBatch.AllowTypes(Sandbox.ModAPI.MyWhitelistTarget,System.Type[])">
            <summary>
                Adds one or more specific types and all their members to the whitelist.
            </summary>
            <param name="target"></param>
            <param name="types"></param>
        </member>
        <member name="M:VRage.Scripting.IMyWhitelistBatch.AllowMembers(Sandbox.ModAPI.MyWhitelistTarget,System.Reflection.MemberInfo[])">
            <summary>
                Adds only the specified members to the whitelist.
            </summary>
            <param name="target"></param>
            <param name="members"></param>
        </member>
        <member name="T:VRage.Scripting.MyApiTarget">
            <summary>
                API target
            </summary>
        </member>
        <member name="F:VRage.Scripting.MyApiTarget.None">
            <summary>
                No API target. Unrestricted compilation (no whitelisting, no instruction counting)
            </summary>
        </member>
        <member name="F:VRage.Scripting.MyApiTarget.Mod">
            <summary>
                Mod API target. Whitelisted, but no instruction counting.
            </summary>
        </member>
        <member name="F:VRage.Scripting.MyApiTarget.Ingame">
            <summary>
                Ingame API target. Whitelisted and instruction counted.
            </summary>
        </member>
        <member name="T:VRage.Scripting.MyScriptCompiler">
            <summary>
                Provides a compiler for scripts, with support for a type whitelist and instruction counting.
            </summary>
        </member>
        <member name="F:VRage.Scripting.MyScriptCompiler.Static">
            <summary>
                Retrieves the default script compiler.
            </summary>
        </member>
        <member name="P:VRage.Scripting.MyScriptCompiler.AssemblyLocations">
            <summary>
                Gets the assembly locations to be referenced by the scripts
            </summary>
        </member>
        <member name="P:VRage.Scripting.MyScriptCompiler.ImplicitIngameScriptNamespaces">
            <summary>
                Gets the namespaces that are to be added to the ingame script using list
            </summary>
        </member>
        <member name="P:VRage.Scripting.MyScriptCompiler.UnblockableIngameExceptions">
            <summary>
                Gets the exception types that are to be made unblockable in ingame scripts
            </summary>
        </member>
        <member name="P:VRage.Scripting.MyScriptCompiler.ConditionalCompilationSymbols">
            <summary>
                Gets the conditional compilation symbols scripts are compiled with.
            </summary>
        </member>
        <member name="P:VRage.Scripting.MyScriptCompiler.DiagnosticOutputPath">
            <summary>
                If this property is set, the compiler will write altered scripts and diagnostics to this
                folder.
            </summary>
        </member>
        <member name="P:VRage.Scripting.MyScriptCompiler.Whitelist">
            <summary>
                Gets the whitelist being used for this compiler.
            </summary>
        </member>
        <member name="P:VRage.Scripting.MyScriptCompiler.IgnoredWarnings">
            <summary>
                Contains the diagnostic codes of warnings that should not be reported by the compiler.
            </summary>
        </member>
        <member name="P:VRage.Scripting.MyScriptCompiler.EnableDebugInformation">
            <summary>
                Determines whether debug information is enabled on a global level. This decision can be made on a per-script
                fashion on each of the compile methods, but if this property is set to <c>true</c>, it will override any
                parameter value.
            </summary>
        </member>
        <member name="M:VRage.Scripting.MyScriptCompiler.Compile(VRage.Scripting.MyApiTarget,System.String,VRage.Scripting.Script,System.Collections.Generic.List{VRage.Scripting.MyScriptCompiler.Message},System.String,System.Boolean)">
            <summary>
                Compiles a script.
            </summary>
            <param name="target"></param>
            <param name="assemblyName"></param>
            <param name="script"></param>
            <param name="messages"></param>
            <param name="enableDebugInformation"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.MyScriptCompiler.Compile(VRage.Scripting.MyApiTarget,System.String,System.Collections.Generic.IEnumerable{VRage.Scripting.Script},System.Collections.Generic.List{VRage.Scripting.MyScriptCompiler.Message},System.String,System.Boolean)">
            <summary>
                Compiles a script.
            </summary>
            <param name="target"></param>
            <param name="assemblyName"></param>
            <param name="scripts"></param>
            <param name="messages"></param>
            <param name="friendlyName"></param>
            <param name="enableDebugInformation"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.MyScriptCompiler.InjectInstructionCounter(Microsoft.CodeAnalysis.CSharp.CSharpCompilation,Microsoft.CodeAnalysis.SyntaxTree)">
            <summary>
                Injects instruction counter code into the given syntax tree.
            </summary>
            <param name="compilation"></param>
            <param name="tree"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.MyScriptCompiler.InjectMod(Microsoft.CodeAnalysis.CSharp.CSharpCompilation,Microsoft.CodeAnalysis.SyntaxTree,System.Int32)">
            <summary>
            Injects perf counters and ProtoMember tags into Mod's syntax tree
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.MyScriptCompiler.AnalyzeDiagnostics(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic},System.Collections.Generic.List{VRage.Scripting.MyScriptCompiler.Message},System.Boolean@)">
            <summary>
                Analyzes the given diagnostics and places errors and warnings in the messages lists.
            </summary>
            <param name="diagnostics"></param>
            <param name="messages"></param>
            <param name="success"></param>
        </member>
        <member name="M:VRage.Scripting.MyScriptCompiler.WriteDiagnostics(VRage.Scripting.MyApiTarget,System.String,System.Collections.Generic.IEnumerable{VRage.Scripting.MyScriptCompiler.Message},System.Boolean)">
            <summary>
                If diagnostic output is enabled, this method writes the log of a compilation.
            </summary>
            <param name="target"></param>
            <param name="assemblyName"></param>
            <param name="messages"></param>
            <param name="success"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.MyScriptCompiler.WriteDiagnostics(VRage.Scripting.MyApiTarget,System.String,System.Collections.Generic.IList{Microsoft.CodeAnalysis.SyntaxTree},System.String)">
            <summary>
                If diagnostics is enabled, this method writes
            </summary>
            <param name="target"></param>
            <param name="assemblyName"></param>
            <param name="syntaxTrees"></param>
            <param name="suffix"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.MyScriptCompiler.CreateCompilation(System.String,System.Collections.Generic.IEnumerable{VRage.Scripting.Script},System.Boolean)">
            <summary>
                Creates a script compilation for the given script set.
            </summary>
            <param name="assemblyFileName"></param>
            <param name="scripts"></param>
            <param name="enableDebugInformation"></param>
            <param name="whitelistAnalyzer"></param>
            <param name="compilation"></param>
            <param name="analyticCompilation"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.MyScriptCompiler.AddReferencedAssemblies(System.String[])">
            <summary>
                Adds assemblyLocations to be referenced by scripts.
            </summary>
            <param name="assemblyLocations"></param>
        </member>
        <member name="M:VRage.Scripting.MyScriptCompiler.AddImplicitIngameNamespacesFromTypes(System.Type[])">
            <summary>
                Adds the given namespaces for automatic inclusion in the ingame script wrapper.
                **This method does NOT whitelist namespaces!
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:VRage.Scripting.MyScriptCompiler.AddUnblockableIngameExceptions(System.Type[])">
            <summary>
                Adds the given exceptions to the unblockable list for ingame scripts. These exceptions
                will be added to try/catch expressions so they cannot be caught in-game.
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:VRage.Scripting.MyScriptCompiler.AddConditionalCompilationSymbols(System.String[])">
            <summary>
                Adds a conditional compilation symbol
            </summary>
            <param name="symbols"></param>
        </member>
        <member name="M:VRage.Scripting.MyScriptCompiler.GetIngameScript(System.String,System.String,System.String,System.String)">
            <summary>
                Creates a complete code file from an ingame script.
            </summary>
            <param name="code"></param>
            <param name="className"></param>
            <param name="inheritance"></param>
            <param name="modifiers"></param>
            <returns></returns>
        </member>
        <member name="T:VRage.Scripting.MyWhitelistException">
            <summary>
            Exceptions during registration of whitelisted type members
            </summary>
        </member>
        <member name="T:VRage.Scripting.MyScriptWhitelist">
            <summary>
                The script whitelist contains information about which types and type members are allowed in the
                various types of scripts.
            </summary>
        </member>
        <member name="M:VRage.Scripting.MyScriptWhitelist.OpenBatch">
            <summary>
                Opens the whitelist, allowing for addition of new members.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.MyScriptWhitelist.Clear">
            <summary>
                Clears the whitelist.
            </summary>
        </member>
        <member name="M:VRage.Scripting.MyScriptWhitelist.MyWhitelistBatch.AllowNamespaceOfTypes(Sandbox.ModAPI.MyWhitelistTarget,System.Type[])">
            <summary>
                Adds the entire namespace of one or more given types.
            </summary>
            <param name="target"></param>
            <param name="types"></param>
        </member>
        <member name="M:VRage.Scripting.MyScriptWhitelist.MyWhitelistBatch.AllowTypes(Sandbox.ModAPI.MyWhitelistTarget,System.Type[])">
            <summary>
                Adds one or more specific types and all their members to the whitelist.
            </summary>
            <param name="target"></param>
            <param name="types"></param>
        </member>
        <member name="M:VRage.Scripting.MyScriptWhitelist.MyWhitelistBatch.AllowMembers(Sandbox.ModAPI.MyWhitelistTarget,System.Reflection.MemberInfo[])">
            <summary>
                Adds only the specified members to the whitelist.
            </summary>
            <param name="target"></param>
            <param name="members"></param>
        </member>
        <member name="M:VRage.Scripting.Rewriters.InstructionCountingRewriter.AnnotatedIdentifier(System.String)">
            <summary>
                Injected nodes should not be whitelist checked, so they are tagged with an
                annotation to allow the whitelist analyzer to skip them.
            </summary>
            <param name="identifierName"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.Rewriters.InstructionCountingRewriter.Annotated``1(``0)">
            <summary>
                Injected nodes should not be whitelist checked, so they are tagged with an
                annotation to allow the whitelist analyzer to skip them.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.Rewriters.InstructionCountingRewriter.GenerateUniqueIdentifier(Microsoft.CodeAnalysis.FileLinePositionSpan)">
            <summary>
                Generates an unique-ish identifier to use for variables. If a user manages to collide with these names,
                then they _really_ need to learn proper naming conventions...
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.Rewriters.InstructionCountingRewriter.DeadCheckIfStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)">
            <summary>
                Generates dead checking if statement with injected body block
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.Rewriters.InstructionCountingRewriter.InjectedFinally(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)">
            <summary>
                Generates a finally clause with injected block
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.Rewriters.InstructionCountingRewriter.InstructionCounterCall">
            <summary>
                Creates a call to the instruction counter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.Rewriters.InstructionCountingRewriter.EnterMethodCall">
            <summary>
                Creates a call to the call chain depth counter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.Rewriters.InstructionCountingRewriter.ExitMethodCall">
            <summary>
                Creates a call to the call chain depth counter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.Rewriters.InstructionCountingRewriter.IsDeadCall">
            <summary>
                Creates a call to determine whether or not a given script instance is dead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.Rewriters.InstructionCountingRewriter.YieldGuard(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)">
            <summary>
                Injects guard to yield expression to prevent it from leaking method-chain counter
            </summary>
            <param name="expression">Original yield expression</param>
            <param name="genericAttribute">Explicit guard type</param>
            <returns>Injected yield expression</returns>
        </member>
        <member name="M:VRage.Scripting.Rewriters.InstructionCountingRewriter.GetBlockResumeLocation(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
                Gets the locations to generate #line pragmas for to generate correct error messages, to be used with the
                <see cref="M:VRage.Scripting.Rewriters.InstructionCountingRewriter.InjectedBlock(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" /> method.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.Rewriters.InstructionCountingRewriter.InjectedBlock(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)">
            <summary>
                Either injects counter methods into an existing block syntax, or generates a block syntax to place the counter
                method in.
            </summary>
            <param name="node"></param>
            <param name="injection"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.Rewriters.InstructionCountingRewriter.InjectBlockAsMethodBody(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)">
            <summary>
            Wraps methodBody into try/finally and makes sure that EnterMehod and ExitMethod compiler calls are emited
            </summary>
            <param name="methodBody"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.Rewriters.InstructionCountingRewriter.ProcessMethod(Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax)">
            <summary>
                Generates the instruction counter and call chain depth counter for any form of method (except properties which must
                be handled by themselves).
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.Rewriters.InstructionCountingRewriter.CreateDelegateMethodBody(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Boolean)">
            <summary>
                Replaces an expression based method declaration with a block based one in order to facilitate instruction and
                method call chain counting.
            </summary>
            <param name="expression"></param>
            <param name="hasReturnValue"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.Rewriters.InstructionCountingRewriter.ProcessAnonymousFunction(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
                Generates the instruction counter and call chain depth counter for any form of delegate (anonymous methods,
                lambdas).
            </summary>
            <param name="node"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.Rewriters.InstructionCountingRewriter.VisitYieldStatement(Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax)">
            <summary>
            Injects `yield return`-statement's expression with call to <see cref="M:VRage.Compiler.IlInjector.YieldGuard``1(``0)"/> to prevent <see cref="!:IlInjector.m_callChainDepth"/> from leaking.
            </summary>
        </member>
        <member name="M:VRage.Scripting.Rewriters.InstructionCountingRewriter.Rewrite">
            <summary>
                Creates a new rewritten syntax tree with instruction- and call chain depth counting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.Rewriters.PerfCountingRewriter.AnnotatedIdentifier(System.String)">
            <summary>
                Injected nodes should not be whitelist checked, so they are tagged with an
                annotation to allow the whitelist analyzer to skip them.
            </summary>
            <param name="identifierName"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.Rewriters.PerfCountingRewriter.Annotated``1(``0)">
            <summary>
                Injected nodes should not be whitelist checked, so they are tagged with an
                annotation to allow the whitelist analyzer to skip them.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.Rewriters.PerfCountingRewriter.EnterMethodCall">
            <summary>
                Creates an EnterMethod API call
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.Rewriters.PerfCountingRewriter.ExitMethodCall">
            <summary>
                Creates an ExitMethod API call
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.Rewriters.PerfCountingRewriter.YieldGuard(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)">
            <summary>
                Injects guard to yield expression to prevent it from leaking method-chain counter
            </summary>
            <param name="expression">Original yield expression</param>
            <param name="genericAttribute">Explicit guard type</param>
            <returns>Injected yield expression</returns>
        </member>
        <member name="M:VRage.Scripting.Rewriters.PerfCountingRewriter.ReenterYieldMethodCall">
            <summary>
                Creates an ExitMethod API call
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Scripting.Rewriters.PerfCountingRewriter.VisitPropertyDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax)">
            <summary>
            Catch expression bodied properties and rewrite them into full fat get-only ones so <see cref="M:VRage.Scripting.Rewriters.PerfCountingRewriter.VisitAccessorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax)"/> can handle the rest.
            </summary>
        </member>
        <member name="M:VRage.Scripting.Rewriters.PerfCountingRewriter.VisitDestructorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax)">
            <summary>
            Should not be allowed for neither Mods nor PB but inject it too, just in case
            </summary>
        </member>
        <member name="M:VRage.Scripting.Rewriters.PerfCountingRewriter.VisitYieldStatement(Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax)">
            <summary>
            Injects `yield return`-statement's expression with call to <see cref="M:VRage.Scripting.CompilerMethods.ModPerfCounter.YieldGuard``1(System.Int32,``0)"/> to prevent <see cref="!:ModPerfCounter.CallStackDepth"/> from leaking.
            </summary>
        </member>
        <member name="T:VRage.Scripting.Script">
            <summary>
                Represents a named script.
            </summary>
        </member>
        <member name="F:VRage.Scripting.Script.Name">
            <summary>
                The name of the script.
            </summary>
        </member>
        <member name="F:VRage.Scripting.Script.Code">
            <summary>
                The code content of the script.
            </summary>
        </member>
        <member name="T:VRage.Scripting.TypeKeyExtensions">
            <summary>
                Roslyn does not provide a good way to compare a <see cref="T:System.Type" /> with an <see cref="T:Microsoft.CodeAnalysis.ISymbol" />. These
                extensions aim to provide "good enough" comparisons. In addition it adds a few other key types to be used
                for the <see cref="T:VRage.Scripting.MyScriptWhitelist" />.
            </summary>
        </member>
        <member name="T:VRage.Scripting.TypeKeyQuantity">
            <summary>
            Determines what quantity a given type key should represent (see individual members)
            </summary>
        </member>
        <member name="F:VRage.Scripting.TypeKeyQuantity.None">
            <summary>
            No quantity
            </summary>
        </member>
        <member name="F:VRage.Scripting.TypeKeyQuantity.ThisOnly">
            <summary>
            This specific member only
            </summary>
        </member>
        <member name="F:VRage.Scripting.TypeKeyQuantity.AllMembers">
            <summary>
            This and all nested members
            </summary>
        </member>
    </members>
</doc>
