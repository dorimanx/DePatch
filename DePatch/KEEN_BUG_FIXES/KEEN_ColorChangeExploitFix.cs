using System.Collections.Generic;
using System.Reflection;
using NLog;
using Sandbox.Engine.Multiplayer;
using Sandbox.Game.Multiplayer;
using Sandbox.Game.World;
using Torch.Managers.PatchManager;
using VRage.Network;
using VRage.Serialization;
using VRageMath;

namespace DePatch.KEEN_BUG_FIXES
{
	[PatchShim]
	public static class KEEN_ColorChangeExploitFix
    {
		private static readonly Logger Log = LogManager.GetCurrentClassLogger();

		public static void Patch(PatchContext ctx)
		{
			MethodInfo _target = typeof(MyPlayerCollection).GetMethod("OnPlayerColorsChangedRequest", BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic);
			MethodInfo _patch = typeof(KEEN_ColorChangeExploitFix).GetMethod(nameof(OnPlayerColorsChangedRequestFix), BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic);
			ctx.GetPattern(_target).Prefixes.Add(_patch);
		}

		private static bool OnPlayerColorsChangedRequestFix(int serialId, [Serialize(MyObjectFlags.DefaultZero)] List<Vector3> newColors)
		{
			if (!DePatchPlugin.Instance.Config.Enabled)
				return true;

			// if we get more or less colors from client, server can crash or prevent world save, and crash.
			// This exploit still exist as KEEN code is not checking this, code functions are based on 14 colors, any change will crash "for" functions.
			// Original fix by Rexxar

			if (newColors.Count == 14)
				return true;

			var PlayerName = MySession.Static.Players.TryGetIdentityNameFromSteamId(MyEventContext.Current.Sender.Value);
			var PlayerSteamID = MyEventContext.Current.Sender.Value;

			Log.Error($"{PlayerName} SteamId {PlayerSteamID} sent invalid color request!");

			(MyMultiplayer.Static as MyMultiplayerServerBase).ValidationFailed(PlayerSteamID);

			MyEventContext.ValidationFailed();

			return false;
		}
	}
}